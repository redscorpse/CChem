" --- BASIC SETUP --- {{{
" Source: https://github.com/brandon-wallace

" :h 'command'

" Disable compatibilty with Vi.
set nocompatible

" Allow plugins to be used.
filetype plugin indent on

" Languages {{{
syntax on
set omnifunc=syntaxcomplete#Complete

set encoding=UTF-8
" Set languages in no-programming files
autocmd FileType markdown setlocal spell
" Usually spanish (set it as default)
set spelllang=es
" Enable dictionary autocompletion
autocmd FileType markdown setlocal complete+=kspell

"}}}

" Theme => gruvbox
set termguicolors
colorscheme gruvbox
set bg=dark
let g:gruvbox_contrast_dark = "hard"
highlight Normal ctermbg=NONE
" set laststatus=2
set noshowmode " It's in the lightline plugin (nav bar)

" Show line numbers and relativenumbers.
set number
set relativenumber
"set numberwidth=1

" Highlight line and column with cursor.
set cursorline
set cursorcolumn

" Enables mouse
set mouse=a

" Navigate "normally" through lines
set wrap
set whichwrap=b,s,<,>
" allows backspacece to behave "normally"
set backspace=indent,eol,start

" Show the line and column position of cursor.
set ruler

" Split window to open a pane in the bottom/right.
set splitbelow
set splitright

" Leave a number of rows below cursor.
set scrolloff=0

" Tabs
set shiftwidth=2
set tabstop=2
set softtabstop=2
set autoindent
set expandtab
" Ensure tabs don't get converted to spaces in Makefiles.
autocmd FileType make setlocal noexpandtab
set showtabline=1

set diffopt+=vertical

" Show command in the last line of the screen.
set showcmd



" Searching
set showmatch
set hlsearch      " highlight matches
set incsearch     " incremental searching
set ignorecase   " searches are case insensitive...
set smartcase    " ... unless they contain at least one capital letter


" Back up files.
set history=8000
set backup
set backupdir=~/.vim/backup/
set undofile
set undodir=~/.vim/undo/
set undoreload=2000
" set directory=/tmp
set autoread

" Switch to another buffer without saving.
set hidden

" Set text width
set textwidth=80

" Hide mouse when typing.
set mousehide

" Greatly enhance command line tab completion.
set wildmenu

" Set wildmode.
set wildmode=full

" Ignore files.
set wildignore=*.jpg,*.mp4,*.zip,*.iso,*.pdf,*.pyc,*.odt,*.png,*.gif,*.tar,*.gz,*.xz,*.bz2,*.tgz,*.db,*.exe,*.odt,*.xlsx,*.docx,*.tar,*.rar,*.img,*.odt,*.m4a,*.bmp,*.ogg,*.mp3,*.gzip,*.flv,*.deb,*.rpm

"}}}


" --- PLUGINS --- {{{

" Plugin installer: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" --------------------
" You can link other files (more easy to read) with:
" so ~/.vim/plugins.vim
" so ~/.vim/plugin-config.vim
" --------------------

" Specify a directory for plugins.
silent! call plug#begin('~/.vim/pack/git-plugins/start/')

Plug 'tpope/vim-surround' " Surrounding ysw)
Plug 'preservim/nerdtree' " NerdTree
Plug 'tpope/vim-commentary' " For Commenting gcc & gc
" Plug 'vim-airline/vim-airline' " Status bar
Plug 'lifepillar/pgsql.vim' " PSQL Pluging needs :SQLSetType pgsql.vim
Plug 'ap/vim-css-color' " CSS Color Preview
Plug 'rafi/awesome-vim-colorschemes' " Retro Scheme
Plug 'neoclide/coc.nvim'  " Auto Completion
Plug 'ryanoasis/vim-devicons' " Developer Icons
Plug 'tc50cal/vim-terminal' " Vim Terminal
Plug 'preservim/tagbar' " Tagbar for code navigation
Plug 'terryma/vim-multiple-cursors' " CTRL + N for multiple cursors


" Syntax
" Plug 'sheerun/vim-polyglot'
" " Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
" Plug 'norcalli/nvim-colorizer.lua'
" Plug 'dense-analysis/ale'
" Plug 'vim-syntastic/syntastic'
" Plug 'mhinz/vim-signify'

" Status bar
Plug 'itchyny/lightline.vim'
" Plug 'maximbaz/lightline-ale'
" Plug 'vim-airline/vim-airline'

" Themes
Plug 'morhetz/gruvbox'
Plug 'shinchu/lightline-gruvbox.vim'

" Tree
" Plug 'preservim/nerdtree'

" Searching
" Plug 'junegunn/fzf'
" Plug 'junegunn/fzf.vim'
Plug 'ctrlpvim/ctrlp.vim'

" Typing
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'alvan/vim-closetag'
Plug 'AndrewRadev/tagalong.vim'

" Commentary
" Plug 'tpope/vim-commentary'
" Plug 'scrooloose/nerdcommenter'

" Autocomplete
" Plug 'sirver/ultisnips'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'ycm-core/YouCompleteMe'
" Plug 'lifepillar/vim-mucomplete'
" Plug 'Shougo/neocomplete.vim'
" Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'

" tmux
" Plug 'benmills/vimux'
" Plug 'christoomey/vim-tmux-navigator'

" test
" Plug 'tyewang/vimux-jest-test'
" Plug 'janko-m/vim-test'

" IDE
" Plug 'editorconfig/editorconfig-vim'
" Plug 'terryma/vim-multiple-cursors'
" Plug 'easymotion/vim-easymotion'
Plug 'yggdroot/indentline'

" git
" Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-repeat'
" Plug 'airblade/vim-gitgutter'




" --- Others ---{{{

" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'

" Automatically show Vim's complete menu while typing.
" Plug 'vim-scripts/AutoComplPop'

" Dashboard
" Plug 'glepnir/dashboard-nvim'

" Plug 'preservim/tagbar'

" Better manage Vim sessions.
" Plug 'tpope/vim-obsession'

" Pass focus events from tmux to Vim (useful for autoread and linting tools).
" Plug 'tmux-plugins/vim-tmux-focus-events'

" Helpers for moving and manipulating files / directories.
" Plug 'tpope/vim-eunuch'

" Run a diff on 2 directories.
" Plug 'will133/vim-dirdiff'

" Run a diff on 2 blocks of text.
" Plug 'AndrewRadev/linediff.vim'

" Add spelling errors to the quickfix list (vim-ingo-library is a dependency).
" Plug 'inkarkat/vim-ingo-library' | Plug 'inkarkat/vim-SpellCheck'

" Briefly highlight which text was yanked.
" Plug 'machakann/vim-highlightedyank'

" Highlight which character to jump to when using horizontal movement keys.
" Plug 'unblevable/quick-scope'

" Modify * to also work with visual selections.
" Plug 'nelstrom/vim-visual-star-search'

" Automatically clear search highlights after you move your cursor.
" Plug 'haya14busa/is.vim'

" Handle multi-file find and replace.
" Plug 'mhinz/vim-grepper'

" Better display unwanted whitespace.
" Plug 'ntpeters/vim-better-whitespace'

" A number of useful motions for the quickfix list, pasting and more.
" Plug 'tpope/vim-unimpaired'

" Drastically improve insert mode performance in files with folds.
" Plug 'Konfekt/FastFold'

" Show git file changes in the gutter.
" Plug 'mhinz/vim-signify'

" Dim paragraphs above and below the active paragraph.
" Plug 'junegunn/limelight.vim'

" Distraction free writing by removing UI elements and centering everything.
" Plug 'junegunn/goyo.vim'

" A bunch of useful language related snippets (ultisnips is the engine).
 " Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

 " Run test suites for various languages.
 " Plug 'janko/vim-test'

 " ----- Languages and file types ----- {{{
 " Plug 'cakebaker/scss-syntax.vim'
 " Plug 'chr4/nginx.vim'
 " Plug 'chrisbra/csv.vim'
 " Plug 'ekalinin/dockerfile.vim'
 " Plug 'elixir-editors/vim-elixir'
 " Plug 'Glench/Vim-Jinja2-Syntax'
 " Plug 'fatih/vim-go'
 " Plug 'cespare/vim-toml', { 'branch': 'main' }
 " Plug 'godlygeek/tabular' | Plug 'tpope/vim-markdown'
 " Plug 'jvirtanen/vim-hcl'
 " Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
 " Plug 'lifepillar/pgsql.vim'
 " Plug 'othree/html5.vim'
 " Plug 'pangloss/vim-javascript'
 " Plug 'MaxMEllon/vim-jsx-pretty'
 " Plug 'PotatoesMaster/i3-vim-syntax'
 " Plug 'stephpy/vim-yaml'
 " Plug 'tmux-plugins/vim-tmux'
 " Plug 'tpope/vim-git'
 " Plug 'tpope/vim-liquid'
 " Plug 'tpope/vim-rails'
 " Plug 'vim-python/python-syntax'
 " Plug 'vim-ruby/vim-ruby'
 " Plug 'wgwoods/vim-systemd-syntax'
 " Plug 'towolf/vim-helm'
 " Plug 'hashivim/vim-terraform'

" }}}

" }}}

call plug#end()

"}}}

" --- Plugins Config ---{{{

" HTML, JSX
let g:closetag_filenames = '*.html,*.js,*.jsx,*.ts,*.tsx'

" Lightline (nav bar)
let g:lightline= {
      \ 'active': {
      \   'left': [['mode', 'paste'], [], ['relativepath', 'modified']],
      \   'right': [['kitestatus'], ['filetype', 'percent', 'lineinfo'], ['gitbranch']]
      \ },
      \ 'inactive': {
      \   'left': [['inactive'], ['relativepath']],
      \   'right': [['bufnum']]
      \ },
      \ 'component': {
      \   'bufnum': '%n',
      \   'inactive': 'inactive'
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \ },
      \ 'colorscheme': 'gruvbox',
      \ 'subseparator': {
      \   'left': '',
      \   'right': ''
      \ }
      \}

"  Nerdtree
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeAutoDeleteBuffer=1
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
let NERDTreeShowLineNumbers=1
let NERDTreeMapOpenInTab='\t'
let NERDTreeIgnore=['\.jpg$', '\.mp4$', '\.zip$', '\.iso$', '\.pdf$', '\.pyc$', '\.odt$', '\.png$', '\.gif$', '\.tar$', '\.gz$', '\.xz$', '\.bz2$', '\.tz$', '\.db$', '\.exe$', '\.odt$', '\xlsx$', '\docx$', '\.tar$', '\.rar$', '\.img$', '\.odt$', '\.m4a$', '\.bmp$', '\.ogg$', '\.mp3$', '\.gzip$', '\.flv$', '\.deb$', '\.rpm$']

" coc
let g:coc_disable_startup_warning = 1
autocmd FileType scss setl iskeyword+=@-@

" MUComplete
set completeopt-=preview
set completeopt+=longest,menuone,noselect
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#completion_delay = 1

" FZF
" Ctrl+p for searching through files
nnoremap <C-p> :FZF<Cr>

" ALE
let g:ale_linters_explicit = 1
let g:ale_linters = {'python': ['flake8']}
let g:ale_python_flake8_executable = 'flake8-3'

"}}}


" --- MAPPINGS --- {{{
" Key mapping syntax: 

" `map_mode <what_you_type> <what_is_executed>`

" Commentary
vmap cmm $gcb<CR>
nmap cmm $gcb<CR>

" Set leader and local leader key to ' ' (space) instead of the default backslash character '\' and '\' respectively.
let mapleader = ' '
let maplocalleader = ' '

" Type Nt in normal mode to open and close Nerdtree.
nnoremap Nt :NERDTreeToggle<cr>

" Turn off the highlighting after doing a search.
nnoremap <silent> <localleader>\ :nohlsearch<cr>

" Map 'ee' to the ESC key. 
inoremap ee <esc>
vnoremap ee <esc> 

" selectect all
  map <C-a> ggVG
  " CTRL+c -> copy selected
  " CTRL+v -> paste
  " CTRL+z -> undo
  " CTRL+SHIFT+z -> redo
  " SHIFT -> select text
  " Move to the beginning of the file
  " Move to the end ofthe file
  " Beginning-End of a line

" Move 1 more lines up or down in normal and visual selection modes.
nnoremap <C-k> :m .-2<CR>==
nnoremap <C-j> :m .+1<CR>==
vnoremap <C-k> :m '<-2<CR>gv=gv
vnoremap <C-j> :m '>+1<CR>gv=gv
" nnoremap <C-Up> :m .-2<CR>==
" nnoremap <C-Down> :m .+1<CR>==
" vnoremap <C-Up> :m '<-2<CR>gv=gv
" vnoremap <C-Down> :m '>+1<CR>gv=gv

" No insert mode after cutting
nnoremap cc cc<Esc>

"
" Press middle mouse button to paste text from clip board.
"nnoremap <mousemiddle> <esc>"*P

" Center cursor in middle of window during a search.
"nnoremap n nzz
"nnoremap N Nzz

" Insert a new line without going into insert mode.
"nnoremap <leader>o o<esc>
"nnoremap <leader>O O<esc>

" Send file to printer (from a Linux).
" View available printers:   lpstat -v
" Set default printer:       lpoptions -d <printer_name>
" Press <leader>p to print the current file.
"nnoremap <silent> <leader>p :%w !lp<cr>

" Move between split windows using CTRL+j, CTRL+k, CTRL+h, and CRTR+l.
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l

" Resize split window with arrow keys.
"noremap <c-up> <c-w>+
"noremap <c-down> <c-w>-
"noremap <c-left> <c-w>>
"noremap <c-right> <c-w><

" Press ` s` to source the .vimrc file.
"nnoremap <leader>s :w<CR>:source $MYVIMRC<cr>

" Press <leader>f to see a list of fonts available on the system.
"nnoremap <leader>f :set guifont=*<cr>

" Set the language you want to check spelling for.
" Examples:
" :setlocal spell spelllang=en_us   (For US English)
" :setlocal spell spelllang=es      (For Spanish)
" Press z= to correct the word under the cursor.
" Move to the next mispelled word by pressing ]s or to the previous word [s
" Disable spell check :set nospell
" Press -S to check spelling in current buffer.
"nnoremap <Leader>S <ESC>:setlocal spell spelllang=en_us<CR>



" --- Maps --- {{{

"let mapleader=" "

" quick semi
"nnoremap <Leader>; $a;<Esc>

"nnoremap <Leader>w :w<CR>
"nnoremap <Leader>q :q<CR>

" shorter commands
"cnoreabbrev tree NERDTreeToggle
"cnoreabbrev find NERDTreeFind

" plugs
"map <Leader>nt :NERDTreeFind<CR>

" tmux navigator
"nnoremap <silent> <Leader><C-h> :TmuxNavigateLeft<cr>
"nnoremap <silent> <Leader><C-j> :TmuxNavigateDown<cr>
"nnoremap <silent> <Leader><C-k> :TmuxNavigateUp<cr>
"nnoremap <silent> <Leader><C-l> :TmuxNavigateRight<cr>

" Remap keys for gotos
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

" Remap surround to lowercase s so it does not add an empty space
"xmap s <Plug>VSurround
" diagnostics
"nnoremap <leader>P :let @*=expand("%")<CR>

" tabs navigation
"map <Leader>h :tabprevious<cr>
"map <Leader>l :tabnext<cr>

" buffers
"map <Leader>ob :Buffers<cr>

" keeping it centered
"nnoremap n nzzzv
"nnoremap N Nzzzv
"nnoremap J mzJ`z

" Moving text
"vnoremap J :m '>+1<CR>gv=gv
"vnoremap K :m '<-2<CR>gv=gv
"nnoremap <Leader>k :m .-2<CR>==
"nnoremap <Leader>j :m .+1<CR>==

" faster scrolling
"nnoremap <C-j> 10<C-e>
"nnoremap <C-k> 10<C-y>
"nmap <Leader>s <Plug>(easymotion-s2)

" git
"nnoremap <Leader>G :G<cr>
"nnoremap <Leader>gp :Gpush<cr>
"nnoremap <Leader>gl :Gpull<cr>

" run current file
"nnoremap <Leader>x :!node %<cr>

" Use <c-space> to trigger completion.
"if &filetype == "javascript" || &filetype == "python"
"  "inoremap <c-space> <C-x><C-u>
"else
"  inoremap <silent><expr> <c-space> coc#refresh()
"endif


"set splitright
"function! OpenTerminal()
"  " move to right most buffer
"  execute "normal \<C-l>"
"  execute "normal \<C-l>"
"  execute "normal \<C-l>"
"  execute "normal \<C-l>"

"  let bufNum = bufnr("%")
"  let bufType = getbufvar(bufNum, "&buftype", "not found")

"  if bufType == "terminal"
"    " close existing terminal
"    execute "q"
"  else
"    " open terminal
"    execute "vsp term://zsh"

"    " turn off numbers
"    execute "set nonu"
"    execute "set nornu"

"    " toggle insert on enter/exit
"    silent au BufLeave <buffer> stopinsert!
"    silent au BufWinEnter,WinEnter <buffer> startinsert!

"    " set maps inside terminal buffer
"    execute "tnoremap <buffer> <C-h> <C-\\><C-n><C-w><C-h>"
"    execute "tnoremap <buffer> <C-t> <C-\\><C-n>:q<CR>"
"    execute "tnoremap <buffer> <C-\\><C-\\> <C-\\><C-n>"

"    startinsert!
"  endif
"endfunction
"nnoremap <C-t> :call OpenTerminal()<CR>

"inoremap <expr> <CR> ParensIndent()

"function! ParensIndent()
"  let prev = col('.') - 1
"  let after = col('.')
"  let prevChar = matchstr(getline('.'), '\%' . prev . 'c.')
"  let afterChar = matchstr(getline('.'), '\%' . after . 'c.')
"  if (prevChar == '"' && afterChar == '"') ||
"\    (prevChar == "'" && afterChar == "'") ||
"\    (prevChar == "(" && afterChar == ")") ||
"\    (prevChar == "{" && afterChar == "}") ||
"\    (prevChar == "[" && afterChar == "]")
"    return "\<CR>\<ESC>O"
"  endif
  
"  return "\<CR>"
"endfunction

"inoremap <expr> <space> ParensSpacing()

"function! ParensSpacing()
"  let prev = col('.') - 1
"  let after = col('.')
"  let prevChar = matchstr(getline('.'), '\%' . prev . 'c.')
"  let afterChar = matchstr(getline('.'), '\%' . after . 'c.')
"  if (prevChar == '"' && afterChar == '"') ||
"\    (prevChar == "'" && afterChar == "'") ||
"\    (prevChar == "(" && afterChar == ")") ||
"\    (prevChar == "{" && afterChar == "}") ||
"\    (prevChar == "[" && afterChar == "]")
"    return "\<space>\<space>\<left>"
"  endif
  
"  return "\<space>"
"endfunction

"inoremap <expr> <BS> ParensRemoveSpacing()

"function! ParensRemoveSpacing()
"  let prev = col('.') - 1
"  let after = col('.')
"  let prevChar = matchstr(getline('.'), '\%' . prev . 'c.')
"  let afterChar = matchstr(getline('.'), '\%' . after . 'c.')

"  if (prevChar == '"' && afterChar == '"') ||
"\    (prevChar == "'" && afterChar == "'") ||
"\    (prevChar == "(" && afterChar == ")") ||
"\    (prevChar == "{" && afterChar == "}") ||
"\    (prevChar == "[" && afterChar == "]")
"    return "\<bs>\<right>\<bs>"
"  endif
  
"  if (prevChar == ' ' && afterChar == ' ')
"    let prev = col('.') - 2
"    let after = col('.') + 1
"    let prevChar = matchstr(getline('.'), '\%' . prev . 'c.')
"    let afterChar = matchstr(getline('.'), '\%' . after . 'c.')
"    if (prevChar == '"' && afterChar == '"') ||
"  \    (prevChar == "'" && afterChar == "'") ||
"  \    (prevChar == "(" && afterChar == ")") ||
"  \    (prevChar == "{" && afterChar == "}") ||
"  \    (prevChar == "[" && afterChar == "]")
"      return "\<bs>\<right>\<bs>"
"    endif
"  endif
  
"  return "\<bs>"
"endfunction

"inoremap { {}<left>
"inoremap ( ()<left>
"inoremap [ []<left>
"inoremap ' ''<left>
"inoremap " "<left>

"let curly = "}"
"inoremap <expr> } CheckNextParens(curly)

"let bracket = "]"
"inoremap <expr> ] CheckNextParens(bracket)

"let parens = ")"
"inoremap <expr> ) CheckNextParens(parens)

"let quote = "'"
"inoremap <expr> ' CheckNextQuote(quote)

"let dquote = '"'
"inoremap <expr> " CheckNextQuote(dquote)

"let bticks = '`'
"inoremap <expr> ` CheckNextQuote(bticks)

"function CheckNextQuote(c)
"  let after = col('.')
"  let afterChar = matchstr(getline('.'), '\%' . after . 'c.')
  
"  if (afterChar == a:c)
"    return "\<right>"
"  endif
"  if (afterChar == ' ' || afterChar == '' || afterChar == ')' || afterChar== '}' || afterChar == ']')
"    return a:c . a:c . "\<left>"
"  endif
"  if (afterChar != a:c)
"    let bticks = '`'
"    let dquote = '"'
"    let quote = "'"
"    if(afterChar == dquote || afterChar == quote || afterChar == bticks)
"      return a:c . a:c . "\<left>"
"    endif
"  endif
"  return a:c
"endfunction

"function CheckNextParens(c)
"  let after = col('.')
"  let afterChar = matchstr(getline('.'), '\%' . after . 'c.')
"  if (afterChar == a:c)

"    return "\<right>"
"  endif
"  return a:c
"endfunction


"}}}

" }}}


" VIMSCRIPT FILE SETTINGS ------------------------------------------------ {{{

" --- FOLDING --- {{{
" Everything between this three braces will be hidden.
" Keys:
" • `zo` to open a single fold under the cursor.
" • `zc` to close the fold under the cursor.
" • `zR` to open all folds.
" • `zM` to close all folds.
 
" Use the marker method of folding.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END


" Also markdown folding
let g:markdown_folding = 1
let g:markdown_enable_folding = 1
set nofoldenable

" }}}


" Turn on cursorline and cursorcolumn only in active window.
augroup cursor_off
    autocmd!
    autocmd WinLeave * set nocursorline nocursorcolumn
    autocmd WinEnter * set cursorline cursorcolumn
augroup END

" Auto load a template for a new file if existing.
augroup filetype_html
    autocmd!
    autocmd BufNewFile * silent! 0r $HOME/.vim/templates/%:e.tpl
augroup END

" Set options for Gvim.
if has("gui_running")

    " Set the background tone.
    set background=dark
    
    " Set the color scheme for GUI Vim.
    colorscheme gruvbox

    " Set font.
    set guifont=FiraCode\ Nerd\ Font\ Mono\ Regular\ 14

    " Make GUI Vim look like Vim in the terminal.
    
    " Hide the toolbar.
    set guioptions-=T
        
    " Hide the the left-side scroll bar.
    set guioptions-=L
        
    " Hide the the left-side scroll bar.
    set guioptions-=r
        
    " Hide the the menu bar.
    set guioptions-=m
        
    " Hide the the bottom scroll bar.
    set guioptions-=b
    
endif

" }}}

" VIMSCRIPT FILE SETTINGS ------------------------------------------------ {{{

    " Clear status line when vimrc is reloaded.
    set statusline=

    " Show full path to the file.
    set statusline+=\ %F

    " Display modified flag for unsaved files.
    set statusline+=\ %M

    " Display the file type.
    set statusline+=\ %Y

    " Display if a file is read only.
    set statusline+=\ %R

    " Show the buffer number.
    set statusline+=\ buff:\ %n

    " Display the ascii code of the character under cursor.
    set statusline+=\ ascii:\ %b

    " Display the hex code of the character under cursor.
    set statusline+=\ hex:\ 0x%B

    " Split the left side from the right side.
    set statusline+=%=

    " Show the total number of lines in the file.
    set statusline+=\ lines:\ %L

    " Show the row the cursor is on.
    set statusline+=\ row:\ %l

    " Show the column the cursor is on.
    set statusline+=\ col:\ %c

    " Show the percentage of cursor is currently in the file. 
    set statusline+=\ percent:\ %p%%

    " Add a space character.
    set statusline+=\ 

    " Show the status on the second to last line.
    set laststatus=2

" }}}




" ---------- EXTERNAL ---------- {{{

" Color settings ---{{{

" Enable 24-bit true colors if your terminal supports it.
"if (has("termguicolors"))
"  " https://github.com/vim/vim/issues/993#issuecomment-255651605
"  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"  set termguicolors
"endif


" Specific colorscheme settings (must come before setting your colorscheme).
"if !exists('g:gruvbox_contrast_light')
"  let g:gruvbox_contrast_light='hard'
"endif

" Set the color scheme.
"colorscheme gruvbox
"set background=dark

" Specific colorscheme settings (must come after setting your colorscheme).
"if (g:colors_name == 'gruvbox')
"  if (&background == 'dark')
"    hi Visual cterm=NONE ctermfg=NONE ctermbg=237 guibg=#3a3a3a
"  else
"    hi Visual cterm=NONE ctermfg=NONE ctermbg=228 guibg=#f2e5bc
"    hi CursorLine cterm=NONE ctermfg=NONE ctermbg=228 guibg=#f2e5bc
"    hi ColorColumn cterm=NONE ctermfg=NONE ctermbg=228 guibg=#f2e5bc
"  endif
"endif

" Spelling mistakes will be colored up red.
"hi SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
"hi SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
"hi SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
"hi SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f

"}}}

" Status line ---{{{

" Heavily inspired by: https://github.com/junegunn/dotfiles/blob/master/vimrc
function! s:statusline_expr()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = ' %= '
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'

  return '[%n] %f %<'.mod.ro.ft.fug.sep.pos.'%*'.pct
endfunction

let &statusline = s:statusline_expr()

" }}}

" Basic Settings ---{{{

" Use a line cursor within insert mode and a block cursor everywhere else.

" Using iTerm2? Go-to preferences / profile / colors and disable the smart bar cursor color. Then pick a cursor and highlight color that matches your theme.
" That will ensure your cursor is always visible within insert mode.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
"let &t_SI = "\e[6 q"
"let &t_EI = "\e[2 q"

" set autoread
" set backupdir=/tmp//,.
" set clipboard=unnamedplus,unnamed
" set colorcolumn=80
" set complete+=kspell
" set completeopt=menuone,longest
" set directory=/tmp//,.
" set encoding=utf-8
" set formatoptions=tcqrn1
" set hidden
" set laststatus=2
" set matchpairs+=<:> " Use % to jump between pairs
" set mmp=5000
" set modelines=2
" set mouse=a
" set noerrorbells visualbell t_vb=
" set noshiftround
" set nospell
" set nostartofline
" set regexpengine=1
" set shortmess+=c
" set showmode
" set smartcase
" set spelllang=en_us
" set textwidth=0
" set ttimeout
" set timeoutlen=1000
" set ttimeoutlen=0
" set ttyfast
" if !has('nvim')
" set ttymouse=sgr
" endif
" set undodir=/tmp
" set undofile
" set virtualedit=block
" set wildmenu
" Shows menu at the bottom (not full screen)
" set wildmode=full

"runtime! macros/matchit.vim

"}}}

" Basic mappings ---{{{

" Seamlessly treat visual lines as actual lines when moving around.
"noremap j gj
"noremap k gk
"noremap <Down> gj
"noremap <Up> gk
"inoremap <Down> <C-o>gj
"inoremap <Up> <C-o>gk

" Navigate around splits with a single key combo.
"nnoremap <C-l> <C-w><C-l>
"nnoremap <C-h> <C-w><C-h>
"nnoremap <C-k> <C-w><C-k>
"nnoremap <C-j> <C-w><C-j>

" Cycle through splits.
"nnoremap <S-Tab> <C-w>w

" Press * to search for the term under the cursor or a visual selection and then press a key below to replace all instances of it in the current file.
"nnoremap <Leader>r :%s///g<Left><Left>
"nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" The same as above but instead of acting on the whole file it will be restricted to the previously visually selected range. You can do that by pressing *, visually selecting the range you want it to apply to and then press a key below to replace all instances of it in the current selection.
"xnoremap <Leader>r :s///g<Left><Left>
"xnoremap <Leader>rc :s///gc<Left><Left><Left>

" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
"nnoremap <silent> s* :let @/='\<'.expand('<cword>').'\>'<CR>cgn
"xnoremap <silent> s* "sy:let @/=@s<CR>cgn

" Clear search highlights.
"map <Leader><Space> :let @/=''<CR>

" Format paragraph (selected or not) to 80 character lines.
"nnoremap <Leader>g gqap
"xnoremap <Leader>g gqa

" Prevent x and the delete key from overriding what's in the clipboard.
"noremap x "_x
"noremap X "_x
"noremap <Del> "_x

" Prevent selecting and pasting from overwriting what you originally copied.
"xnoremap p pgvy

" Keep cursor at the bottom of the visual selection after you yank it.
"vmap y ygv<Esc>

" Edit Vim config file in a new tab.
"map <Leader>ev :tabnew $MYVIMRC<CR>

" Source Vim config file.
"map <Leader>sv :source $MYVIMRC<CR>

" Toggle spell check.
"nnoremap <F5> :setlocal spell!<CR>
"inoremap <F5> <C-o>:setlocal spell!<CR>

" Copy the current buffer's path to your clipboard.
"nmap cp :let @+ = expand("%")<CR>

" Automatically fix the last misspelled word and jump back to where you were.
"   Taken from this talk: https://www.youtube.com/watch?v=lwD8G1P52Sk
"nnoremap <leader>sp :normal! mz[s1z=`z<CR>

" Toggle visually showing all whitespace characters.
"nnoremap <F7> :set list!<CR>
"inoremap <F7> <C-o>:set list!<CR>



" Toggle quickfix window.
"function! QuickFix_toggle()
"    for i in range(1, winnr('$'))
"        let bnum = winbufnr(i)
"        if getbufvar(bnum, '&buftype') == 'quickfix'
"            cclose
"            return
"        endif
"    endfor

"    copen
"endfunction
"nnoremap <silent> <Leader>c :call QuickFix_toggle()<CR>

" Convert the selected text's title case using the external tcc script.
"   Requires: https://github.com/nickjj/title-case-converter
"vnoremap <Leader>tc c<C-r>=system('tcc', getreg('"'))[:-2]<CR>

" Navigate the complete menu items like CTRL+n / CTRL+p would.
"inoremap <expr> <Down> pumvisible() ? "<C-n>" :"<Down>"
"inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

" Select the complete menu item like CTRL+y would.
"inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
"inoremap <expr> <CR> pumvisible() ? "<C-y>" :"<CR>"

" Cancel the complete menu item like CTRL+e would.
"inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

"}}}

" Basic autocommands ---{{{

" Auto-resize splits when Vim gets resized.
"autocmd VimResized * wincmd =

" Update a buffer's contents on focus if it changed outside of Vim.
"au FocusGained,BufEnter * :checktime

" Unset paste on InsertLeave.
"autocmd InsertLeave * silent! set nopaste

" Make sure all types of requirements.txt files get syntax highlighting.
"autocmd BufNewFile,BufRead requirements*.txt set ft=python

" Make sure .aliases, .bash_aliases and similar files get syntax highlighting.
"autocmd BufNewFile,BufRead .*aliases* set ft=sh

" Make sure Kubernetes yaml files end up being set as helm files.
"au BufNewFile,BufRead *.{yaml,yml} if getline(1) =~ '^apiVersion:' || getline(2) =~ '^apiVersion:' | setlocal filetype=helm | endif



" Only show the cursor line in the active buffer.
"augroup CursorLine
"    au!
"    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"    au WinLeave * setlocal nocursorline
"augroup END

" Mappings to make Vim more friendly towards presenting slides.
"autocmd BufNewFile,BufRead *.vpm call SetVimPresentationMode()
"function SetVimPresentationMode()
"  nnoremap <buffer> <Right> :n<CR>
"  nnoremap <buffer> <Left> :N<CR>

"  if !exists('#goyo')
"    Goyo
"  endif
"endfunction

"}}}

" Basic commands ---{{{

" Allow files to be saved as root when forgetting to start Vim using sudo.
"command Sw :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Add all TODO items to the quickfix list relative to where you opened Vim.
"function! s:todo() abort
"  let entries = []
"  for cmd in ['git grep -niIw -e TODO -e FIXME 2> /dev/null',
"            \ 'grep -rniIw -e TODO -e FIXME . 2> /dev/null']
"    let lines = split(system(cmd), '\n')
"    if v:shell_error != 0 | continue | endif
"    for line in lines
"      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
"      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
"    endfor
"    break
"  endfor

"  if !empty(entries)
"    call setqflist(entries)
"    copen
"  endif
"endfunction

"command! Todo call s:todo()

" Profile Vim by running this command once to start it and again to stop it.
"function! s:profile(bang)
"  if a:bang
"    profile pause
"    noautocmd qall
"  else
"    profile start /tmp/profile.log
"    profile func *
"    profile file *
"  endif
"endfunction

"command! -bang Profile call s:profile(<bang>0)

"}}}

" Plugin settings, mappings and autocommands {{{

" junegunn/fzf.vim
" .............................................................................

"let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

" Customize fzf colors to match your color scheme.
"let g:fzf_colors =
"\ { 'fg':      ['fg', 'Normal'],
"  \ 'bg':      ['bg', 'Normal'],
"  \ 'hl':      ['fg', 'Comment'],
"  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"  \ 'hl+':     ['fg', 'Statement'],
"  \ 'info':    ['fg', 'PreProc'],
"  \ 'prompt':  ['fg', 'Conditional'],
"  \ 'pointer': ['fg', 'Exception'],
"  \ 'marker':  ['fg', 'Keyword'],
"  \ 'spinner': ['fg', 'Label'],
"  \ 'header':  ['fg', 'Comment'] }

"let g:fzf_action = {
"  \ 'ctrl-t': 'tab split',
"  \ 'ctrl-b': 'split',
"  \ 'ctrl-v': 'vsplit',
"  \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}

" Launch fzf with CTRL+P.
"nnoremap <silent> <C-p> :FZF -m<CR>

" Map a few common things to do with FZF.
"nnoremap <silent> <Leader><Enter> :Buffers<CR>
"nnoremap <silent> <Leader>l :Lines<CR>

" Allow passing optional flags into the Rg command.
"   Example: :Rg myterm -g '*.md'
"command! -bang -nargs=* Rg
"  \ call fzf#vim#grep(
"  \ "rg --column --line-number --no-heading --color=always --smart-case " .
"  \ <q-args>, 1, fzf#vim#with_preview(), <bang>0)


" unblevable/quick-scope
" .............................................................................

" Trigger a highlight in the appropriate direction when pressing these keys.
"let g:qs_highlight_on_keys=['f', 'F', 't', 'T']

" Only underline the highlights instead of using custom colors.
"highlight QuickScopePrimary gui=underline cterm=underline
"highlight QuickScopeSecondary gui=underline cterm=underline


" mhinz/vim-grepper
" .............................................................................

"let g:grepper={}
"let g:grepper.tools=["rg"]

"xmap gr <plug>(GrepperOperator)

" After searching for text, press this mapping to do a project wide find and
" replace. It's similar to <leader>r except this one applies to all matches
" across all files instead of just the current file.
"nnoremap <Leader>R
"  \ :let @s='\<'.expand('<cword>').'\>'<CR>
"  \ :Grepper -cword -noprompt<CR>
"  \ :cfdo %s/<C-r>s//g \| update
"  \<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" The same as above except it works with a visual selection.
"xmap <Leader>R
"    \ "sy
"    \ gvgr
"    \ :cfdo %s/<C-r>s//g \| update
"     \<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>


"let test#python#pytest#executable='docker-compose exec web py.test'

"let test#ruby#rails#executable='docker-compose exec -e RAILS_ENV=test webpacker rails test'

"let test#elixir#exunit#executable='docker-compose exec -e MIX_ENV=test web mix test'

"nmap <silent> t<C-n> :TestNearest<CR>
"nmap <silent> t<C-f> :TestFile<CR>
"nmap <silent> t<C-a> :TestSuite<CR>
"nmap <silent> t<C-l> :TestLast<CR>
"nmap <silent> t<C-v> :TestVisit<CR>

"}}}

"}}}
